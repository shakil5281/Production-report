generator client {
  provider = "prisma-client-js"
}

// Switch datasource to SQLite for local development
// Postgres-native @db.* field attributes removed below

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

enum PermissionType {
  // User management
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER
  
  // Production management
  CREATE_PRODUCTION
  READ_PRODUCTION
  UPDATE_PRODUCTION
  DELETE_PRODUCTION
  
  // Reports
  CREATE_REPORT
  READ_REPORT
  UPDATE_REPORT
  DELETE_REPORT
  
  // System settings
  MANAGE_SYSTEM
  MANAGE_ROLES
  MANAGE_PERMISSIONS
}

enum StyleStatus {
  PENDING
  RUNNING
  WAITING
  COMPLETE
  CANCELLED
}

enum ProductionStage {
  CUTTING
  SEWING
  FINISHING
}

enum PaymentMethod {
  CASH
  MFS
  BANK
  OTHER
}

enum CashbookType {
  DEBIT
  CREDIT
}

// Users & RBAC
model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  role          UserRole @default(USER)
  isActive      Boolean  @default(true)
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  userPermissions UserPermission[]
  sessions        Session[]
  createdBy       AuditLog[]       @relation("CreatedBy")
  updatedBy       AuditLog[]       @relation("UpdatedBy")
  
  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        UserRole @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  rolePermissions RolePermission[]
  
  @@map("roles")
}

model PermissionModel {
  id          String         @id @default(uuid())
  name        PermissionType @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  
  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  
  // Relations
  role       Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission PermissionModel @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String   @id @default(uuid())
  userId       String
  permissionId String
  createdAt    DateTime @default(now())
  
  // Relations
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission PermissionModel @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Factory & Lines
model Factory {
  id        String   @id @default(uuid())
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  lines Line[]
  
  @@map("factories")
}

model Line {
  id         String   @id @default(uuid())
  factoryId  String
  name       String
  code       String   @unique
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  
  // Relations
  factory           Factory           @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  styleAssignments  StyleAssignment[]
  productionEntries ProductionEntry[]
  expenses         Expense[]
  salaryEntries    SalaryEntry[]
  cashbookEntries  CashbookEntry[]
  
  @@map("lines")
}

// Style & Assignments
model Style {
  id           String     @id @default(uuid())
  styleNumber  String     @unique
  buyer        String
  poNumber     String
  orderQty     Int
  unitPrice    Decimal    
  plannedStart DateTime
  plannedEnd   DateTime
  status       StyleStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  
  // Relations
  styleAssignments StyleAssignment[]
  productionEntries ProductionEntry[]
  shipments        Shipment[]
  
  @@map("styles")
}

model StyleAssignment {
  id           String    @id @default(uuid())
  lineId       String
  styleId      String
  startDate    DateTime
  endDate      DateTime?
  targetPerHour Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  
  // Relations
  line  Line  @relation(fields: [lineId], references: [id], onDelete: Cascade)
  style Style @relation(fields: [styleId], references: [id], onDelete: Cascade)
  
  @@map("style_assignments")
}

// Production
model ProductionEntry {
  id         String         @id @default(uuid())
  date       DateTime       
  hourIndex  Int            // 0-23
  lineId     String
  styleId    String
  stage      ProductionStage
  inputQty   Int            @default(0)
  outputQty  Int            @default(0)
  defectQty  Int            @default(0)
  reworkQty  Int            @default(0)
  notes      String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
  
  // Relations
  line  Line  @relation(fields: [lineId], references: [id], onDelete: Cascade)
  style Style @relation(fields: [styleId], references: [id], onDelete: Cascade)
  
  @@unique([date, hourIndex, lineId, styleId, stage])
  @@map("production_entries")
}

// Expenses & Salary
model ExpenseCategory {
  id           String @id @default(uuid())
  name         String @unique
  isSalaryFlag Boolean @default(false)
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  
  // Relations
  expenses Expense[]
  
  @@map("expense_categories")
}

model Expense {
  id             String        @id @default(uuid())
  date           DateTime      
  lineId         String?
  categoryId     String
  amount         Decimal       
  description    String?
  paymentMethod  PaymentMethod
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  
  // Relations
  line     Line?          @relation(fields: [lineId], references: [id], onDelete: SetNull)
  category ExpenseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("expenses")
}

model SalaryEntry {
  id          String   @id @default(uuid())
  date        DateTime 
  lineId      String?
  employeeId  String?
  amount      Decimal  
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  
  // Relations
  line Line? @relation(fields: [lineId], references: [id], onDelete: SetNull)
  
  @@map("salary_entries")
}

// Cashbook
model CashbookEntry {
  id            String        @id @default(uuid())
  date          DateTime      
  type          CashbookType
  amount        Decimal       
  category      String
  referenceType String?
  referenceId   String?
  lineId        String?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  
  // Relations
  line Line? @relation(fields: [lineId], references: [id], onDelete: SetNull)
  
  @@map("cashbook_entries")
}

// Shipments
model Shipment {
  id              String   @id @default(uuid())
  date            DateTime 
  styleId         String
  quantity        Int
  destination     String
  awbOrContainer  String?
  remarks         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  
  // Relations
  style Style @relation(fields: [styleId], references: [id], onDelete: Cascade)
  
  @@map("shipments")
}

// Audit Log
model AuditLog {
  id        String   @id @default(uuid())
  tableName String
  recordId  String
  action    String   // CREATE, UPDATE, DELETE
  oldValues Json?
  newValues Json?
  createdBy String
  updatedBy String?
  createdAt DateTime @default(now())
  
  // Relations
  user      User    @relation("CreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  updatedByUser User? @relation("UpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}


