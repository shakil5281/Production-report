generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  password        String
  role            UserRole         @default(USER)
  isActive        Boolean          @default(true)
  lastLogin       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       AuditLog[]       @relation("CreatedBy")
  updatedBy       AuditLog[]       @relation("UpdatedBy")
  sessions        Session[]
  userPermissions UserPermission[]

  @@map("users")
}

model Role {
  id              String           @id @default(uuid())
  name            UserRole         @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@map("roles")
}

model PermissionModel {
  id              String           @id @default(uuid())
  name            PermissionType   @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@map("permissions")
}

model RolePermission {
  id           String          @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime        @default(now())
  permission   PermissionModel @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String          @id @default(uuid())
  userId       String
  permissionId String
  createdAt    DateTime        @default(now())
  permission   PermissionModel @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Factory {
  id        String   @id @default(uuid())
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("factories")
}

model Line {
  id                String            @id @default(uuid())
  name              String
  code              String            @unique
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
  cashbookEntries   CashbookEntry[]
  expenses          Expense[]
  productionEntries ProductionEntry[]
  salaryEntries     SalaryEntry[]
  styleAssignments  StyleAssignment[]

  @@map("lines")
}

model Style {
  id                String            @id @default(uuid())
  styleNumber       String            @unique
  buyer             String
  poNumber          String
  orderQty          Int
  unitPrice         Decimal
  plannedStart      DateTime
  plannedEnd        DateTime
  status            StyleStatus       @default(PENDING)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
  productionEntries ProductionEntry[]
  shipments         Shipment[]
  styleAssignments  StyleAssignment[]

  @@map("styles")
}

model StyleAssignment {
  id            String    @id @default(uuid())
  lineId        String
  styleId       String
  startDate     DateTime
  endDate       DateTime?
  targetPerHour Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  line          Line      @relation(fields: [lineId], references: [id], onDelete: Cascade)
  style         Style     @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@map("style_assignments")
}

model ProductionEntry {
  id        String          @id @default(uuid())
  date      DateTime
  hourIndex Int
  lineId    String
  styleId   String
  stage     ProductionStage
  inputQty  Int             @default(0)
  outputQty Int             @default(0)
  defectQty Int             @default(0)
  reworkQty Int             @default(0)
  notes     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())
  line      Line            @relation(fields: [lineId], references: [id], onDelete: Cascade)
  style     Style           @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@map("production_entries")
}

model ProductionList {
  id           String                  @id @default(uuid())
  programCode  String
  styleNo      String                  @unique
  buyer        String
  item         String
  price        Decimal
  percentage   Decimal                 @default(0)
  status       ProductionStatus        @default(PENDING)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  quantities   Json                    @default("[]")
  totalQty     Int                     @default(0)
  dailyReports DailyProductionReport[]
  targets      Target[]

  @@map("production_list")
}

model Target {
  id               String         @id @default(uuid())
  lineNo           String
  styleNo          String
  lineTarget       Int
  inTime           String
  outTime          String
  hourlyProduction Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  date             DateTime
  productionList   ProductionList @relation(fields: [styleNo], references: [styleNo], onDelete: Cascade)

  @@map("targets")
}

model ExpenseCategory {
  id           String    @id @default(uuid())
  name         String    @unique
  isSalaryFlag Boolean   @default(false)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  expenses     Expense[]

  @@map("expense_categories")
}

model Expense {
  id            String          @id @default(uuid())
  date          DateTime
  lineId        String?
  categoryId    String
  amount        Decimal
  description   String?
  paymentMethod PaymentMethod
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  category      ExpenseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  line          Line?           @relation(fields: [lineId], references: [id])

  @@map("expenses")
}

model SalaryEntry {
  id          String   @id @default(uuid())
  date        DateTime
  lineId      String?
  employeeId  String?
  amount      Decimal
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  line        Line?    @relation(fields: [lineId], references: [id])

  @@map("salary_entries")
}

model CashbookEntry {
  id            String       @id @default(uuid())
  date          DateTime
  type          CashbookType
  amount        Decimal
  category      String
  referenceType String?
  referenceId   String?
  lineId        String?
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  line          Line?        @relation(fields: [lineId], references: [id])

  @@map("cashbook_entries")
}

model Shipment {
  id             String   @id @default(uuid())
  date           DateTime
  styleId        String
  quantity       Int
  destination    String
  awbOrContainer String?
  remarks        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  style          Style    @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

model DailyProductionReport {
  id             String         @id @default(uuid())
  date           DateTime
  styleNo        String
  targetQty      Int
  totalAmount    Decimal
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lineNo         String?
  productionQty  Int
  unitPrice      Decimal
  netAmount      Decimal        @default(0)
  productionList ProductionList @relation(fields: [styleNo], references: [styleNo], onDelete: Cascade)

  @@unique([date, styleNo, lineNo])
  @@map("daily_production_reports")
}

model AuditLog {
  id            String   @id @default(uuid())
  tableName     String
  recordId      String
  action        String
  oldValues     Json?
  newValues     Json?
  createdBy     String
  updatedBy     String?
  createdAt     DateTime @default(now())
  user          User     @relation("CreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  updatedByUser User?    @relation("UpdatedBy", fields: [updatedBy], references: [id])

  @@map("audit_logs")
}

model Employee {
  id          String            @id @default(uuid())
  employeeId  String            @unique
  name        String
  department  Department
  designation String
  shiftType   ShiftType         @default(DAY_SHIFT)
  salary      Decimal?
  joiningDate DateTime?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  attendance  DailyAttendance[]

  @@map("employees")
}

model DailyAttendance {
  id         String           @id @default(uuid())
  date       DateTime
  employeeId String
  status     AttendanceStatus
  inTime     String?
  outTime    String?
  workHours  Decimal?
  overtime   Decimal?
  remarks    String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  employee   Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([date, employeeId])
  @@map("daily_attendance")
}

model ManpowerSummary {
  id         String            @id @default(uuid())
  date       DateTime
  section    String
  subsection String?
  lineNumber String?
  itemType   ManpowerItemType
  present    Int               @default(0)
  absent     Int               @default(0)
  leave      Int               @default(0)
  others     Int               @default(0)
  total      Int               @default(0)
  remarks    String?
  parentId   String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  parent     ManpowerSummary?  @relation("ManpowerHierarchy", fields: [parentId], references: [id])
  children   ManpowerSummary[] @relation("ManpowerHierarchy")

  @@unique([date, section, subsection, lineNumber])
  @@map("manpower_summary")
}

model OvertimeRecord {
  id              String   @id @default(uuid())
  date            DateTime
  section         String
  presentWorkers  Int      @default(0)
  totalWorkers    Int      @default(0)
  overtimeDetails Json?
  totalOtHours    Decimal  @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([date, section])
  @@map("overtime_records")
}

model DailySalary {
  id             String   @id @default(uuid())
  date           DateTime
  section        String
  workerCount    Int      @default(0)
  regularRate    Decimal  @default(0)
  overtimeHours  Decimal  @default(0)
  overtimeRate   Decimal  @default(0)
  regularAmount  Decimal  @default(0)
  overtimeAmount Decimal  @default(0)
  totalAmount    Decimal  @default(0)
  remarks        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([date, section])
  @@map("daily_salaries")
}

model MonthlyExpense {
  id            String        @id @default(uuid())
  month         Int
  year          Int
  category      String
  amount        Decimal       @default(0)
  description   String?
  paymentDate   DateTime?
  paymentStatus PaymentStatus @default(PENDING)
  remarks       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([month, year, category])
  @@map("monthly_expenses")
}

model MonthlyAttendanceReport {
  id                String     @id @default(uuid())
  month             Int
  year              Int
  department        Department
  totalWorkingDays  Int        @default(0)
  totalPresent      Int        @default(0)
  totalAbsent       Int        @default(0)
  totalLeave        Int        @default(0)
  totalOvertime     Decimal    @default(0)
  averageAttendance Decimal    @default(0)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([month, year, department])
  @@map("monthly_attendance_report")
}

enum UserRole {
  SUPER_ADMIN
  USER
}

enum PermissionType {
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER
  CREATE_PRODUCTION
  READ_PRODUCTION
  UPDATE_PRODUCTION
  DELETE_PRODUCTION
  CREATE_REPORT
  READ_REPORT
  UPDATE_REPORT
  DELETE_REPORT
  MANAGE_SYSTEM
  MANAGE_ROLES
  MANAGE_PERMISSIONS
  CREATE_CUTTING
  READ_CUTTING
  UPDATE_CUTTING
  DELETE_CUTTING
  CREATE_CASHBOOK
  READ_CASHBOOK
  UPDATE_CASHBOOK
  DELETE_CASHBOOK
  CREATE_EXPENSE
  READ_EXPENSE
  UPDATE_EXPENSE
  DELETE_EXPENSE
  CREATE_TARGET
  READ_TARGET
  UPDATE_TARGET
  DELETE_TARGET
  CREATE_LINE
  READ_LINE
  UPDATE_LINE
  DELETE_LINE
  CREATE_SHIPMENT
  READ_SHIPMENT
  UPDATE_SHIPMENT
  DELETE_SHIPMENT
}

enum StyleStatus {
  PENDING
  RUNNING
  WAITING
  COMPLETE
  CANCELLED
}

enum ProductionStage {
  CUTTING
  SEWING
  FINISHING
}

enum ProductionStatus {
  PENDING
  RUNNING
  COMPLETE
  CANCELLED
}

enum PaymentMethod {
  CASH
  MFS
  BANK
  OTHER
}

enum CashbookType {
  DEBIT
  CREDIT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  LEAVE
  SICK_LEAVE
  CASUAL_LEAVE
  OVERTIME
}

enum Department {
  CUTTING
  SEWING
  FINISHING
  QUALITY
  ADMIN
  MAINTENANCE
  SECURITY
  STORE
  ACCOUNTS
  PRODUCTION
}

enum ShiftType {
  DAY_SHIFT
  NIGHT_SHIFT
  GENERAL_SHIFT
}

enum ManpowerItemType {
  SECTION
  SUBSECTION
  LINE
  TOTAL
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
